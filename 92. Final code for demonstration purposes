import pygame
import time
import random

# Initialize Pygame
pygame.init()

# Define colors
white = (255, 255, 255)
black = (0, 0, 0)
red = (213, 50, 80)
green = (0, 255, 0)
blue = (50, 153, 213)

# Set display dimensions
dis_width = 800
dis_height = 600

# Set snake block size
block_size = 20

# Set game speed
speed = 15

# Initialize display
dis = pygame.display.set_mode((dis_width, dis_height))
pygame.display.set_caption('Snake Game')

# Initialize clock
clock = pygame.time.Clock()

# Font for text display
font_style = pygame.font.SysFont(None, 50)

# Function to display message
def message(msg, color, x, y):
    mesg = font_style.render(msg, True, color)
    dis.blit(mesg, [x, y])

# Function to display title screen
def show_title_screen():
    dis.fill(blue)
    message("Snake Game", red, dis_width/3, dis_height/3)
    pygame.draw.rect(dis, green, [dis_width/3, dis_height/2, 200, 50])
    message("Play", black, dis_width/3 + 50, dis_height/2 + 10)
    pygame.draw.rect(dis, red, [dis_width/3, dis_height/2 + 90, 200, 50])
    message("Quit", black, dis_width/3 + 50, dis_height/2 + 100)
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if dis_width/3 <= mouse_pos[0] <= dis_width/3 + 200 and \
                    dis_height/2 <= mouse_pos[1] <= dis_height/2 + 50:
                    return
                if dis_width / 3 <= mouse_pos[0] <= dis_width / 3 + 200 and \
                    dis_height / 2 + 90 <= mouse_pos[1] <= dis_height / 2 + 140:
                    quit()

# Function to display leaderboard
def show_leaderboard(score):
    dis.fill(blue)
    message("Game Over!", red, dis_width/3, dis_height/3)
    message(f"Your Score: {score}", black, dis_width/3, dis_height/3 + 50)
    pygame.display.update()
    time.sleep(5)

    # Read leaderboard from file
    leaderboard = []
    try:
        with open("leaderboard.txt", "r") as file:
            for line in file:
                leaderboard.append(line.strip())
    except FileNotFoundError:
        pass

    # Append current score and sort
    leaderboard.append(str(score))
    leaderboard = sorted(leaderboard, key=int, reverse=True)

    # Write updated leaderboard back to file
    with open("leaderboard.txt", "w") as file:
        for score in leaderboard:
            file.write(f"{score}\n")

    # Display leaderboard
    dis.fill(blue)
    message("Leaderboard", black, dis_width/3, dis_height/3)
    y = dis_height / 3 + 50
    for i, entry in enumerate(leaderboard[:5]):
        text = font_style.render(f"{i+1}. Score: {entry}", True, black)
        dis.blit(text, [dis_width / 3, y])
        y += 50
    pygame.display.update()
    time.sleep(5)


#Dispay return message
    dis.fill(blue)
    message("Press r to return to the menu!", white, dis_width / 3 - 90, dis_height / 3)
    y = dis_height / 3 + 50
    pygame.display.update()
    time.sleep(5)

# Function to draw snake
def snake(block_size, snake_list):
    for x in snake_list:
        pygame.draw.rect(dis, green, [x[0], x[1], block_size, block_size])

# Main game loop
def gameLoop():
    show_title_screen()
    game_over = False
    game_close = False

# Initialize starting position
    lead_x = dis_width / 2
    lead_y = dis_height / 2

# Initialize velocity
    lead_x_change = 0
    lead_y_change = 0

#Initiates snake length
    snake_list = []
    snake_length = 1

# Initialize food position
    food_x = round(random.randrange(0, dis_width - block_size) / block_size) * block_size
    food_y = round(random.randrange(0, dis_height - block_size) / block_size) * block_size

# Initialize score
    score = 0

# Resets the loop by pressing r
    while not game_over:
        while game_close:
            show_leaderboard(score)
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
                        gameLoop()

#Movement
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    lead_x_change = -block_size
                    lead_y_change = 0
                elif event.key == pygame.K_RIGHT:
                    lead_x_change = block_size
                    lead_y_change = 0
                elif event.key == pygame.K_UP:
                    lead_y_change = -block_size
                    lead_x_change = 0
                elif event.key == pygame.K_DOWN:
                    lead_y_change = block_size
                    lead_x_change = 0

# Boundary conditions
        if lead_x >= dis_width or lead_x < 0 or lead_y >= dis_height or lead_y < 0:
            game_close = True

        lead_x += lead_x_change
        lead_y += lead_y_change
        dis.fill(blue)
        pygame.draw.rect(dis, red, [food_x, food_y, block_size, block_size])

        snake_head = []
        snake_head.append(lead_x)
        snake_head.append(lead_y)
        snake_list.append(snake_head)
#Condition that will shut down the program if ever false
        if len(snake_list) > snake_length:
            del snake_list[0]

        for x in snake_list[:-1]:
            if x == snake_head:
                game_close = True

        snake(block_size, snake_list)
        message(f"Score: {score}", black, 10, 10)
        pygame.display.update()
#When snake collides with food score increments and length increments
        if lead_x == food_x and lead_y == food_y:
            food_x = round(random.randrange(0, dis_width - block_size) / block_size) * block_size
            food_y = round(random.randrange(0, dis_height - block_size) / block_size) * block_size
            snake_length += 1
            score += 1

        clock.tick(speed)

    pygame.quit()
    quit()

gameLoop()
